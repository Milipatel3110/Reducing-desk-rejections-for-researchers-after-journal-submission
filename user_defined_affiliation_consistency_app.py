# -*- coding: utf-8 -*-
"""User - Defined Affiliation Consistency- APP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cNksbtqTFLP-kmHnyC-g2pwRA-mmawDG
"""

text = []
x = input("Enter Text: ")
text.append(x)

import re
def check_author_format(author):
    pattern = r'^[A-Za-z.]+\s[A-Za-z]+\s[A-Za-z]+(?:,\s[A-Za-z ]+)?(?:,\s*[A-Za-z ]+)?(?:,\s[A-za-z]+)$'
    match = re.match(pattern, author)
    if match:
        return True
    else:
        return False

def suggest_author_changes(author):
    # Define regular expression patterns for each part of the author name
    title_pattern = r'^[A-Za-z.]+\s'
    first_name_pattern = r'[A-Za-z]+\s'
    last_name_pattern = r'[A-Za-z]+$'
    qualification_pattern = r',\s*[A-Za-z ]+'
    college_pattern = r',\s*[A-Za-z ]+'
    location_pattern = r',\s*[A-Za-z ]+$'

    # Check if author name matches desired format
    desired_pattern = title_pattern + first_name_pattern + last_name_pattern + qualification_pattern + college_pattern + location_pattern
    if re.match(desired_pattern, author):
        print(f"{author}: The author name is in the desired format.")
        return author
    
    # If author name does not match desired format, suggest changes
    parts = re.findall(r'[A-Za-z.]+', author)
    if len(parts) >= 2:
        # If first and last name are present, assume correct order and suggest adding other parts
        suggested_name = f"{parts[0]}. {parts[1]} {re.findall(last_name_pattern, author)[0]}"
        if re.search(qualification_pattern, author):
            suggested_name += re.findall(qualification_pattern, author)[0]
        if re.search(college_pattern, author):
            suggested_name += re.findall(college_pattern, author)[0]
        if re.search(location_pattern, author):
            suggested_name += re.findall(location_pattern, author)[0]
        print("********************************************************")
        print(f"{author} -> {suggested_name}")
        return suggested_name
    else:
        print("=============================================================")
        print(f"{author} is not in the correct format and could not be modified.")
        return author

for author in text:
    if not check_author_format(author):
        print(f"Author format is incorrect: {author}")
        print("***********************************************************")
        print("Accepted Format: (Professional_Title)+(First_Name)+(Last_Name)+(Highest_Qualification)+(College_Name)+(Location)")
        print("***********************************************************")
#         suggested_author = suggest_author_changes(author)
#         print(f"Original author name: {author}")
#         print(f"Suggested author name: {suggested_author}")
    else:
        print(f"Author format is correct: {author}")

import pickle
import joblib

joblib.dump(text, 'Affiliation Consistency.pkl')

