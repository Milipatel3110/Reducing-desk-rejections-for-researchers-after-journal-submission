# -*- coding: utf-8 -*-
"""Input_Image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XF7g-WxBvO6pIj5J8W60lNJE9favTu9F
"""

import cv2
from scipy.signal import wiener
import os
import pickle
import joblib

# Load the image
image_path = input("Enter the path of the image: ")
image = cv2.imread(image_path)

if image is not None:
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Compute the variance of Laplacian of the image
    variance = cv2.Laplacian(gray, cv2.CV_64F).var()

    # Check if the image is blurry
    if variance < 40:
        print("The image is blurry.")
        print("Sharpness of the image before enhancing its quality : ",variance)
        #try to clear the image
        # convert image to grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        # apply the Wiener filter to the grayscale image
        deblurred = wiener(gray, (5, 5))
        # compute the variance of Laplacian of the deblurred image
        variance = cv2.Laplacian(deblurred, cv2.CV_64F).var()
        print("Sharpness of the image after enhancing its quality : ",variance)
        # Display the original and deblurred image
#         cv2.imshow("Original", image)
#         cv2.imshow("Deblurred", deblurred)
#         cv2.waitKey(0)
#         cv2.destroyAllWindows()

    else:
        print("The image is not blurry.")
else:
    print("Failed to load image from file.")

joblib.dump(image_path,'imageQualityChecker.pkl')

# import cv2
# from scipy.signal import wiener
# import os

# # Load the image
# image_path = input("Enter the path of the image: ")
# image = cv2.imread(image_path)

# if image is not None:
#     # Convert the image to grayscale
#     gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

#     # Compute the variance of Laplacian of the image
#     variance = cv2.Laplacian(gray, cv2.CV_64F).var()

#     # Check if the image is blurry
#     if variance < 40:
#         print("The image is blurry.")
#         print("Sharpness of the image before enhancing its quality : ",variance)
#         #try to clear the image
#         # convert image to grayscale
#         gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#         # apply the Wiener filter to the grayscale image
#         deblurred = wiener(gray, (5, 5))
#         # normalize the pixel values of the image
#         deblurred = cv2.normalize(deblurred, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U)
#         # compute the variance of Laplacian of the deblurred image
#         variance = cv2.Laplacian(deblurred, cv2.CV_64F).var()
#         print("Sharpness of the image after enhancing its quality : ",variance)
#         # Display the original and deblurred image
#         cv2.imshow("Original", image)
#         cv2.imshow("Deblurred", deblurred)
#         cv2.waitKey(0)
#         cv2.destroyAllWindows()

#     else:
#         print("The image is not blurry.")
# else:
#     print("Failed to load image from file.")

