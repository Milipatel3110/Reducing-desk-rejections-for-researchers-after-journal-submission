# -*- coding: utf-8 -*-
"""reference_formatting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_BIe9ADIrLawe88PPOFdmRo2GVz6d5cD
"""

import re

def detect_citation_style(text):
    # Define regular expressions for each citation style
    apa_regex = r'\((\w+), (\d{4})\)'
    chicago_regex = r'(\w+)\. "(.+)" ([A-Z][a-z]+) (\d{1,2}, \d{4}): (\d+)-(\d+)\.'
    mla_regex = r'(\w+)\. "(.+)" (\w+ \d{4}), (\d+)-(\d+)\.'
    ieee_regex = r'\[(\d+)\] (.+)'

    # Try to match each regex to the text
    if re.search(apa_regex, text):
        return 'APA'
    elif re.search(chicago_regex, text):
        return 'Chicago'
    elif re.search(mla_regex, text):
        return 'MLA'
    elif re.search(ieee_regex, text):
        return 'IEEE'
    else:
        return 'Unknown'

# Example usage
text = "According to (Smith, 2005), the sky is blue. Another study (Johnson et al., 2010) found that the sky is actually green."
style = detect_citation_style(text)
print(style)

pip install pdfminer

pip install pdfminer.six

pip install PyPDF4

import PyPDF4
import re

# Open the PDF file
pdf_file = open('/content/Heart_Disease_Prediction_using_Hybrid_machine_Learning_Model.pdf','r')
# Read the PDF file
pdf_reader = PyPDF4.PdfFileReader(open('/content/Heart_Disease_Prediction_using_Hybrid_machine_Learning_Model.pdf','rb'))

# Get the total number of pages
num_pages = pdf_reader.getNumPages()

# Regular expression pattern to match references
ref_pattern = r"^\[\d+\]"

# Loop through each page
for page in range(num_pages):
    # Get the text of the current page
    page_text = pdf_reader.getPage(page).extractText()

    # Split the text into lines
    lines = page_text.split('\n')

    # Loop through each line
    for line in lines:
        # Check if the line matches the reference pattern
        if re.match(ref_pattern, line):
            print("Reference found:", line)

# Close the PDF file
pdf_file.close()

pip install pycite

pip install parse

import pdfminer.high_level
import re

def check_reference_formatting(pdf_path, citation_style='APA'):
    # Read the PDF and extract the text
    with open(pdf_path, 'rb') as f:
        text = pdfminer.high_level.extract_text(f)

    # Define regular expressions for each citation style
    if citation_style == 'APA':
        regex = r'\n(\d+)\. (.+)\. \((\d{4})\)\. (.+)\.'
    elif citation_style == 'Chicago':
        regex = r'\n(\d+)\. (.+)\. "(.+)" ([A-Z][a-z]+) (\d{1,2}, \d{4}): (\d+)-(\d+)\.'
    elif citation_style == 'MLA':
        regex = r'\n(\d+)\. (.+)\. "(.+)" (\w+ \d{4}), (\d+)-(\d+)\.'
    elif citation_style == 'IEEE':
        regex = r'\[(\d+)\] (.+)\.'

    # Find all references using the regex
    references = re.findall(regex, text)

    # Check the formatting of each reference
    for ref in references:
        if citation_style == 'APA':
            # APA style: Author. (Year). Title. Publisher.
            if re.match(r'^[A-Z][a-z]+, [A-Z][a-z]+\. \(\d{4}\)\. .+\.$', ref[1]):
                print(f'Error in reference {ref[0]}: incorrect formatting')
        elif citation_style == 'Chicago':
            # Chicago style: Author. "Title." Journal Date: Page numbers.
            if re.match(r'^[A-Z][a-z]+, [A-Z][a-z]+\. ".+" [A-Z][a-z]+ \d{1,2}, \d{4}: \d+-\d+\.$', ref[1]):
                print(f'Error in reference {ref[0]}: incorrect formatting')
        elif citation_style == 'MLA':
            # MLA style: Author. "Title." Journal Date: Page numbers.
            if re.match(r'^[A-Z][a-z]+, [A-Z][a-z]+\. ".+" \w+ \d{4}, \d+-\d+\.$', ref[1]):
                print(f'Error in reference {ref[0]}: incorrect formatting')
        elif citation_style == 'IEEE':
            # IEEE style: [Number] Author. Title.
            if re.match(r'^[A-Z][a-z]+, [A-Z]\. .+\.$', ref[1]):
                print(f'Error in reference {ref[0]}: incorrect formatting')
    print('Finished checking reference formatting.')

# Example usage
pdf_path = '/content/Heart_Disease_Prediction_using_Hybrid_machine_Learning_Model.pdf'
check_reference_formatting(pdf_path, citation_style='APA')

pip install pycite

import pycite

ref_info = {
    'author': 'Lastname, Firstname',
    'title': 'Title of the book or article',
    'journal': 'Name of the journal',
    'year': 'Year of publication',
    'volume': 'Volume number',
    'issue': 'Issue number',
    'pages': 'Page numbers',
    'publisher': 'Name of the publisher',
    'url': 'URL of the article or book'
}

pip install --upgrade pycite

import PyPDF4
import re
import pycite

# Step 1: Extract text from PDF file
pdf_file = open('/content/Heart_Disease_Prediction_using_Hybrid_machine_Learning_Model.pdf', 'rb')
pdf_reader = PyPDF4.PdfFileReader(pdf_file)

text = ""
for page_num in range(pdf_reader.numPages):
    page = pdf_reader.getPage(page_num)
    text += page.extractText()

# Step 2: Identify citation style using regular expressions
citation_style_patterns = {
    'APA': r'(?P<author>[A-Z][a-z]+, ([A-Z]\.)+)[ ]?\((?P<year>\d{4})\).*(?P<title>[^.]*)\.?(?P<journal>[^.,]*),?[^0-9]*(?P<volume>[0-9]*)[^0-9]*(?P<issue>[^.,]*),?[^0-9]*(?P<pages>[0-9]*)',
    'Chicago': r'(?P<author>[A-Z][a-z]+(, [A-Z][a-z]+)?), [^,]*, (?P<title>[^"]+)"?, (?P<journal>[^,]*),? (?P<year>\d{4})(, (?P<pages>[^,]*))?',
    'MLA': r'(?P<author>[A-Z][a-z]+(, [A-Z][a-z]+)?). "(?P<title>[^"]+)."? (?P<journal>[^,]*), vol. (?P<volume>[0-9]+), no. (?P<issue>[^,]*), (?P<pages>[^,]*)',
    'IEEE': r'(?P<author>[A-Z][a-z]+(, [A-Z]\.)?). "(?P<title>[^"]+)."? (?P<journal>[^,]*), vol. (?P<volume>[0-9]+), no. (?P<issue>[^,]*), (?P<pages>[^,]*)',
    'Turabian': r'(?P<author>[A-Z][a-z]+(, [A-Z]\.)+), (?P<title>[^"]+)"? (?P<journal>[^,]*), (?P<volume>[0-9]+)\((?P<issue>[^)]*)\):(?P<pages>[^-]*)'
}

citation_style_formatters = {
    'APA': lambda entry: f"{entry['author']} ({entry['year']}). {entry['title']}. {entry['journal']}, {entry['volume']}, {entry['issue']}, {entry['pages']}.",
    'Chicago': lambda entry: f"{entry['author']}. \"{entry['title']}\" {entry['journal']} {entry['year']}, {entry['pages']}.",
    'MLA': lambda entry: f"{entry['author']}. \"{entry['title']}\" {entry['journal']}, vol. {entry['volume']}, no. {entry['issue']}, {entry['pages']}.",
    'IEEE': lambda entry: f"{entry['author']}. \"{entry['title']}\" {entry['journal']}, vol. {entry['volume']}, no. {entry['issue']}, {entry['pages']}.",
    'Turabian': lambda entry: f"{entry['author']}, \"{entry['title']}\" {entry['journal']} {entry['volume']}, no. {entry['issue']} ({entry['pages']}."

}

matches = []
for citation_style, pattern in citation_style_patterns.items():
    match = re.findall(pattern, text)
    if len(match) > 0:
        matches = match
        break

# Step 3: Format references using pycite library
if len(matches) > 0:
    entries = []
    for match in matches:
        entry = {
            'author': match[0],
            'year': match[1],
            'title': match[2],
            'journal': match[3],
            'volume': match[4],
            'issue': match[5],
            'pages': match[6]
        }
        entries.append(entry)

import PyPDF4
import re
import pycite

# Step 1: Extract text from PDF file
pdf_file = open('/content/ieee-format.pdf', 'rb')
pdf_reader = PyPDF4.PdfFileReader(pdf_file)

text = ""
for page_num in range(pdf_reader.numPages):
    page = pdf_reader.getPage(page_num)
    text += page.extractText()

# Step 2: Identify citation style using regular expressions
citation_style_patterns = {
    'APA': r'(?P<author>[A-Z][a-z]+, ([A-Z]\.)+)[ ]?\((?P<year>\d{4})\).*(?P<title>[^.]*)\.?(?P<journal>[^.,]*),?[^0-9]*(?P<volume>[0-9]*)[^0-9]*(?P<issue>[^.,]*),?[^0-9]*(?P<pages>[0-9]*)',
    'Chicago': r'(?P<author>[A-Z][a-z]+(, [A-Z][a-z]+)?), [^,]*, (?P<title>[^"]+)"?, (?P<journal>[^,]*),? (?P<year>\d{4})(, (?P<pages>[^,]*))?',
    'MLA': r'(?P<author>[A-Z][a-z]+(, [A-Z][a-z]+)?)[^0-9]*"(?P<title>[^"]+)"?[.]?(?P<journal>[^,]*),? (?P<vol>[0-9]*),?[^0-9]*(?P<issue>[^,]*),?[^0-9]*(?P<year>\d{4})[^0-9]*(?P<pages>[^.,]*)[.]?',
    'IEEE': r'(?P<author>[^,]+), "(?P<title>[^"]+)," (?P<journal>[^,]+), vol. (?P<vol>[0-9]+), no. (?P<issue>[0-9]+), pp. (?P<pages>[0-9-]+), (?P<month>[a-zA-Z]+.) (?P<year>[0-9]+)',
    'Turabian': r'(?P<author>[A-Z][a-z]+(, [A-Z][a-z]+)?), "(?P<title>[^"]+)"\ (?P<journal>[^,]*),\ (?P<year>\d{4}),\ (?P<pages>[0-9]*)',
}

citation_style = None
for style, pattern in citation_style_patterns.items():
    if re.search(pattern, text):
        citation_style = style
        break

if not citation_style:
    print("Could not identify citation style.")
else:
    print(f"Citation style: {citation_style}")

    # Step 3: Extract citation entries using pycite
    #entries = pycite.parse(citation_style, text)
    


    # Step 4: Format citations using pycite
    #)

    ##formatted_bibliography = bibliography.to_str()

    #print(formatted_bibliography)